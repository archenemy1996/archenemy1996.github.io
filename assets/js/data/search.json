[ { "title": "Introduction to Cryptography", "url": "/posts/Introduction-to-Cryptography/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Cryptography", "date": "2024-05-24 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Introduction to CryptographyTask 1 : Introduction" }, { "title": "Encryption - Crypto 101", "url": "/posts/Encryption-Crypto-101/", "categories": "Write-Ups, Cryptography", "tags": "TryHackMe, SQL", "date": "2024-05-24 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Encryption - Crypto 101Task 1 : Introduction" }, { "title": "x86 Architecture Overview", "url": "/posts/x86-Architecture-Overview/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, X86", "date": "2023-08-08 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : x86 Architecture OverviewTask 1 : Introduction" }, { "title": "SQL Injection LAB", "url": "/posts/SQL-injection-lab/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, SQL", "date": "2023-08-08 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : SQL Injection LABTask 1 : IntroductionThis room is meant as an introduction to SQL injection and demonstrates various SQL injection attacks.QuestionsDeploy the machineTask 2 : Introduction to SQL Injection: Part 1SQL injection is a technique through which attackers can execute their own malicious SQL statements generally referred to as a malicious payload. Through the malicious SQL statements, attackers can steal information from the victim’s database; even worse, they may be able to make changes to the database. Our employee management web application has SQL injection vulnerabilities, which mimic the mistakes frequently made by developers.Applications will often need dynamic SQL queries to be able to display content based on different conditions set by the user. To allow for dynamic SQL queries, developers often concatenate user input directly into the SQL statement. Without checks on the received input, string concatenation becomes the most common mistake that leads to SQL injection vulnerability. Without input sanitization, the user can make the database interpret the user input as a SQL statement instead of as data. In other words, the attacker must have access to a parameter that they can control, which goes into the SQL statement. With control of a parameter, the attacker can inject a malicious query, which will be executed by the database. If the application does not sanitize the given input from the attacker-controlled parameter, the query will be vulnerable to SQL injection attack.The following PHP code demonstrates a dynamic SQL query in a login from. The user and password variables from the POST request is concatenated directly into the SQL statement.$query = &quot;SELECT * FROM users WHERE username=&#39;&quot; + $_POST[&quot;user&quot;] + &quot;&#39; AND password= &#39;&quot; + $_POST[&quot;password&quot;]$ + &#39;&quot;;&quot;If the attacker supplies the value&#39; OR 1=1-- - inside the name parameter, the query might return more than one user. Most applications will process the first user returned, meaning that the attacker can exploit this and log in as the first user the query returned. The double-dash (--) sequence is a comment indicator in SQL and causes the rest of the query to be commented out. In SQL, a string is enclosed within either a single quote (&#39;) or a double quote (&quot;). The single quote (&#39;) in the input is used to close the string literal. If the attacker enters&#39; OR 1=1-- - in the name parameter and leaves the password blank, the query above will result in the following SQL statement.&#39; OR 1=1-- -, the OR 1=1 part is attempting to inject a condition that is always true, effectively bypassing any password check in the query. Then, -- - is used to comment out the rest of the query, including any subsequent parts that might be added to prevent the injection.SELECT * FROM users WHERE username = &#39;&#39; OR 1=1-- -&#39; AND password = &#39;&#39;If the database executes the SQL statement above, all the users in the users table are returned. Consequently, the attacker bypasses the application’s authentication mechanism and is logged in as the first user returned by the query.The reason for using -- - instead of -- is primarily because of how MySQL handles the double-dash comment style.From a -- sequence to the end of the line. In MySQL, the -- (double-dash) comment style requires the second dash to be followed by at least one whitespace or control character (such as a space, tab, newline, and so on). This syntax differs slightly from standard SQL comment syntax, as discussed in Section 1.7.2.4, “&#39;--&#39; as the Start of a Comment”.(dev.mysql.com)The safest solution for inline SQL comment is to use --&amp;lt;space&amp;gt;&amp;lt;any character&amp;gt; such as -- - because if it is URL-encoded into --%20- it will still be decoded as -- -. For more information, see: https://blog.raw.pm/en/sql-injection-mysql-comment/SQL Injection 1: Input Box Non-StringWhen a user logs in, the application performs the following query:SELECT uid, name, profileID, salary, passportNr, email, nickName, password FROM usertable WHERE profileID=10 AND password = &#39;ce5ca67...&#39;When logging in, the user supplies input to the profileID parameter. For this challenge, the parameter accepts an integer, as can be seen here:profileID=10Since there is no input sanitization, it is possible to bypass the login by using any True condition such as the one below as the ProfileID1 or 1=1-- -Bypass the login and retrieve the flag.SQL Injection 2: Input Box StringThis challenge uses the same query as in the previous challenge. However, the parameter expects a string instead of an integer, as can be seen here:profileID=&#39;10&#39;Since it expects a string, we need to modify our payload to bypass the login slightly. The following line will let us in:1&#39; or &#39;1&#39;=&#39;1&#39;-- -Bypass the login and retrieve the flag.SQL Injection 3 and 4: URL and POST InjectionHere, the SQL query is the same as the previous one:SELECT uid, name, profileID, salary, passportNr, email, nickName, password FROM usertable WHERE profileID=&#39;10&#39; AND password=&#39;ce5ca67...&#39;But in this case, the malicious user input cannot be injected directly into the application via the login form because some client-side controls have been implemented:function validateform() { var profileID = document.inputForm.profileID.value; var password = document.inputForm.password.value; if (/^[a-zA-Z0-9]*$/.test(profileID) == false || /^[a-zA-Z0-9]*$/.test(password) == false) { alert(&quot;The input fields cannot contain special characters&quot;); return false; } if (profileID == null || password == null) { alert(&quot;The input fields cannot be empty.&quot;); return false; }}The JavaScript code above requires that both the profileID and the password only contains characters between a-z, A-Z, and 0-9. Client-side controls are only there to improve the user experience and is in no way a security feature as the user has full control over the client and the data it submits. For example, a proxy tool such as Burp Suite can be used to bypass the client side JavaScript validation (https://portswigger.net/support/using-burp-to-bypass-client-side-javascript-validation).SQL Injection 3: URL InjectionThis challenge uses a GET request when submitting the login form, as seen here:http://MACHINE_IP:5000/sesqli3/login?profileID=a&amp;amp;password=aThe login and the client-side validation can then easily be bypassed by going directly to this URL:http://MACHINE_IP:5000/sesqli3/login?profileID=-1&#39; or 1=1-- -&amp;amp;password=aThe browser will automatically urlencode this for us. Urlencoding is needed since the HTTP protocol does not support all characters in the request. When urlencoded, the URL looks as follows:http://MACHINE_IP:5000/sesqli3/login?profileID=-1%27%20or%201=1--%20-&amp;amp;password=aThe %27 becomes the single quote (&#39;) character and %20 becomes a blank space.SQL Injection 4: POST InjectionWhen submitting the login form for this challenge, it uses the HTTP POST method. It is possible to either remove/disable the JavaScript validating the login form or submit a valid request and intercept it with a proxy tool such as Burp Suite and modify it:Questions:What is the flag for SQL Injection 1: Input Box Non-String?Answer: THM{dccea429d73d4a6b4f117ac64724f460}What is the flag for SQL Injection 2: Input Box String?Answer: THM{356e9de6016b9ac34e02df99a5f755ba}What is the flag for SQL Injection 3: URL Injection?Answer: THM{645eab5d34f81981f5705de54e8a9c36}What is the flag for SQL Injection 4: POST Injection?Answer: THM{727334fd0f0ea1b836a8d443f09dc8eb}Task 3 : Introduction to SQL Injection: Part 2SQL Injection Attack on an UPDATE StatementIf a SQL injection occurs on an UPDATE statement, the damage can be much more severe as it allows one to change records within the database. In the employee management application, there is an edit profile page as depicted in the following figure.This edit page allows the employees to update their information, but they do not have access to all the available fields, and the user can only change their information. If the form is vulnerable to SQL injection, an attacker can bypass the implemented logic and update fields they are not supposed to, or for other users.We will now enumerate the database via the UPDATE statement on the profile page. We will assume we have no prior knowledge of the database. By looking at the web page’s source code, we can identify potential column names by looking at the name attribute. The columns don’t necessarily need to be named this, but there is a good chance of it, and column names such as “email” and “password” are not uncommon and can easily be guessed.To confirm that the form is vulnerable and that we have working column names, we can try to inject something similar to the code below into the nickName and email field:asd&#39;,nickName=&#39;test&#39;,email=&#39;hackedWhen injecting the malicious payload into the nickName field, only the nickName is updated. When injected into the email field, both fields are updated:" }, { "title": "Bash Scripting", "url": "/posts/OWASP-Broken-Access-Control/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Bash, Scripting, Shell", "date": "2023-07-31 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : OWASP Broken Access Control Task 1 : Introduction " }, { "title": "Intro to Docker", "url": "/posts/Intro-to-Docker/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Docker, Containerization", "date": "2023-05-03 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Intro to DockerTask 1 : IntroductionIn this room, you’ll get your first hands-on experience deploying and interacting with Docker containers.Namely, by the end of the room, we will be familiar with the following: The basic syntax to get you started with Docker. Running and deploying your first container. Understanding how Docker containers are distributed using images. Creating your own image using a Dockerfile. How Dockerfiles are used to build containers, using Docker Compose to orchestrate multiple containers. Applying the knowledge gained from the room into the practical element at the end.Questions Mark complete the questionTask 2 : Basic Docker SyntaxThe syntax for Docker can be categorised into four main groups: Running a container Managing &amp;amp; Inspecting containers Managing Docker images Docker daemon stats and informationManaging Docker ImagesDocker PullIn this room, we will use the Nginx image to run a web server within a container. Before downloading the image, let’s break down the commands and syntax required to download an image. Images can be downloaded using the docker pull command and providing the name of the image.For example, docker pull nginx. Docker must know where to get this image (such as from a repository which we’ll come onto in a later task).Continuing with our example above, let’s download this Nginx image! using docker pull nginxBy running this command, we are downloading the latest version of the image titled “nginx”. Images have these labels called tags. These tags are used to refer to variations of an image. For example, an image can have the same name but different tags to indicate a different version. I’ve provided an example of how tags are used within the table below:Docker ImageTagCommand ExampleExplanationubuntulatestdocker pull ubuntu- IS THE SAME AS -docker pull ubuntu:latestThis command will pull the latest version of the &quot;ubuntu&quot; image. If no tag is specified, Docker will assume you want the &quot;latest&quot; version if no tag is specified.It is worth remembering that you do not always want the &quot;latest&quot;. This image is quite literally the &quot;latest&quot; in the sense it will have the most recent changes. This could either fix or break your container.ubuntu22.04docker pull ubuntu:22.04This command will pull version &quot;22.04 (Jammy)&quot; of the &quot;ubuntu&quot; image.ubuntu20.04docker pull ubuntu:20.04This command will pull version &quot;20.04 (Focal)&quot; of the &quot;ubuntu&quot; image.ubuntu18.04docker pull ubuntu:18.04This command will pull version &quot;18.04 (Bionic)&quot; of the &quot;ubuntu&quot; image.When specifying a tag, you must include a colon : between the image name and tag, for example, ubuntu:22.04 (image:tag). Don’t forget about tags - we will return to these in a future task!Docker Image x/y/zThe docker image command, with the appropriate option, allows us to manage the images on our local system. To list the available options, we can simply do docker image to see what we can do. I’ve done this for you in the terminal below:cmnatic@thm:~$ docker imageUsage: docker image COMMANDManage imagesCommands: build Build an image from a Dockerfile history Show the history of an image import Import the contents from a tarball to create a filesystem image inspect Display detailed information on one or more images load Load an image from a tar archive or STDIN ls List images prune Remove unused images pull Pull an image or a repository from a registry push Push an image or a repository to a registry rm Remove one or more images save Save one or more images to a tar archive (streamed to STDOUT by default) tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGERun &#39;docker image COMMAND --help&#39; for more information on a command.In this room, we are only going to cover the following options for docker images: pull (we have done this above!) ls (list images) rm (remove an image) build (we will come onto this in the “Building our First Container” task)Docker Image lsThis command allows us to list all images stored on the local system. We can use this command to verify if an image has been downloaded correctly and to view a little bit more information about it (such as the tag, when the image was created and the size of the image).cmnatic@thm:~$ docker image lsREPOSITORY TAG IMAGE ID CREATED SIZEubuntu 22.04 2dc39ba059dc 10 days ago 77.8MBnginx latest 2b7d6430f78d 2 weeks ago 142MBcmnatic@thm:~$Docker Image rmIf we want to remove an image from the system, we can use docker image rm along with the name (or Image ID). In the following example, I will remove the &quot;ubuntu&quot; image with the tag “22.04”. My command will be docker image rm ubuntu:22.04It is important to remember to include the tag with the image name.cmnatic@thm:~$ docker image rm ubuntu:22.04Untagged: ubuntu:22.04Untagged: ubuntu@sha256:20fa2d7bb4de7723f542be5923b06c4d704370f0390e4ae9e1c833c8785644c1Deleted: sha256:2dc39ba059dcd42ade30aae30147b5692777ba9ff0779a62ad93a74de02e3e1fDeleted: sha256:7f5cbd8cc787c8d628630756bcc7240e6c96b876c2882e6fc980a8b60cdfa274cmnatic@thm:~$If we were to run a docker image ls, we would see that the image is no longer listed:cmnatic@thm:~$ docker image lsREPOSITORY TAG IMAGE ID CREATED SIZEnginx latest 2b7d6430f78d 2 weeks ago 142MBcmnatic@thm:~$Questions and Answers:Q If we wanted to pull a docker image, what would our command look like? A docker pullQ If we wanted to list all images on a device running Docker, what would our command look like? A docker image lsQ Let’s say we wanted to pull the image “tryhackme” (no quotations); what would our command look like? A docker pull tryhackmeQ Let’s say we wanted to pull the image “tryhackme” with the tag “1337” (no quotations). What would our command look like? A docker pull tryhackme:1337Task 3 : Running Your First ContainerThe Docker run command creates running containers from images. This is where commands from the Dockerfile (as well as our own input at runtime) are run. Because of this, it must be some of the first syntaxes we learn.The command works in the following way:docker run [OPTIONS] IMAGE_NAME [COMMAND] [ARGUMENTS...] the options enclosed in brackets are not required for a container to run.Docker containers can be run with various options - depending on how we will use the container. This task will explain some of the most common options that you may want to use.First, Simply Running a ContainerLet’s recall the syntax required to run a Docker container: docker run [OPTIONS] IMAGE_NAME [COMMAND] [ARGUMENTS...] . In this example, I am going to configure the container to run: An image named &quot;helloworld&quot; &quot;Interactively&quot; by providing the -it switch in the [OPTIONS] command. This will allow us to interact with the container directly. I am going to spawn a shell within the container by providing /bin/bash as the [COMMAND] part. This argument is where we will place what commands you want to run within the container (such as a file, application or shell!) So, to achieve the above, my command will look like the following: docker run -it helloworld /bin/bash cmnatic@thm-intro-to-docker:~$ docker run -it helloworld /bin/bash root@30eff5ed7492:/#We can verify that we have successfully launched a shell because our prompt will change to another user account and hostname. The hostname of a container is the container ID (which can be found by using docker ps). For example, in the terminal above, our username and hostname are root@30eff5ed7492Running Containers…ContinuedAs previously mentioned, Docker containers can be run with various options. The purpose of the container and the instructions set in a Dockerfile (we’ll come onto this in a later task) determines what options we need to run the container with. To start, I’ve put some of the most common options you may need to run your Docker container into the table below.[OPTION]ExplanationRelevant Dockerfile InstructionExample-dThis argument tells the container to start in &quot;detached&quot; mode. This means that the container will run in the background.N/Adocker run -d helloworld-itThis argument has two parts. The &quot;i&quot; means run interactively, and &quot;t&quot; tells Docker to run a shell within the container. We would use this option if we wish to interact with the container directly once it runs.N/Adocker run -it helloworld-vThis argument is short for &quot;Volume&quot; and tells Docker to mount a directory or file from the host operating system to a location within the container. The location these files get stored is defined in the DockerfileVOLUMEdocker run -v /host/os/directory:/container/directory helloworld-pThis argument tells Docker to bind a port on the host operating system to a port that is being exposed in the container. You would use this instruction if you are running an application or service (such as a web server) in the container and wish to access the application/service by navigating to the IP address.EXPOSEdocker run -p 80:80 webserver--rmThis argument tells Docker to remove the container once the container finishes running whatever it has been instructed to do.N/Adocker run --rm helloworld--nameThis argument lets us give a friendly, memorable name to the container. When a container is run without this option, the name is two random words. We can use this open to name a container after the application the container is running.N/Adocker run --name helloworld These are just some arguments we can provide when running a container. Again, most arguments we need to run will be determined by how the container is built. However, arguments such as –rm and –name will instruct Docker on how to run the container. Other arguments include (but are not limited to!): Telling Docker what network adapter the container should use. What capabilities the container should have access to. Storing a value into an environment variable.Listing Running ContainersTo list running containers, we can use the docker ps command. This command will list containers that are currently running - like so:cmnatic@thm:~/intro-to-docker$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a913a8f6e30f cmnatic/helloworld:latest &quot;sleep&quot; 1 months ago Up 3 days 0.0.0.0:8000-&amp;gt;8000/tcp helloworldcmnatic@thm:~/intro-to-docker$his command will also show information about the container, including: The container’s ID What command is the container running When was the container created How long has the container been running What ports are mapped The name of the containerTip: To list all containers (even stopped), you can use docker ps -a:cmnatic@thm:~/intro-to-docker$ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 00ba1eed0826 gobuster:cmnatic &quot;./gobuster dir -url…&quot; an hour ago Exited an hour ago practical_khayyamQuestions and Answers:Q What would our command look like if we wanted to run a container interactively?Note: Assume we are not specifying any image here. A docker run -itQ What would our command look like if we wanted to run a container in “detached” mode?Note: Assume we are not specifying any image here. A docker run -dQ Let’s say we want to run a container that will run and bind a webserver on port 80. What would our command look like?Note: Assume we are not specifying any image here. A docker run -p 80:80Q How would we list all running containers? A docker psQ Now, how would we list all containers (including stopped)? A docker ps -aTask 4 : Intro to DockerfilesDockerfiles play an essential role in Docker. Dockerfiles is a formatted text file which essentially serves as an instruction manual for what containers should do and ultimately assembles a Docker image.You use Dockerfiles to contain the commands the container should execute when it is built. To get started with Dockerfiles, we need to know some basic syntax and instructions. Dockerfiles are formatted in the following way:INSTRUCTION argumentFirst, let’s cover some essential instructions:InstructionDescriptionExampleFROMThis instruction sets a build stage for the container as well as setting the base image (operating system). All Dockerfiles must start with this.FROM ubuntuRUNThis instruction will execute commands in the container within a new layer.RUN whoamiCOPYThis instruction copies files from the local system to the working directory in the container (the syntax is similar to the cp command).COPY /home/cmnatic/myfolder/app/WORKDIRThis instruction sets the working directory of the container. (similar to using cd on Linux).WORKDIR /(sets to the root of the filesystem in the container)CMDThis instruction determines what command is run when the container starts (you would use this to start a service or application).CMD /bin/sh -c script.shEXPOSEThis instruction is used to tell the person who runs the container what port they should publish when running the container.EXPOSE 80(tells the person running the container to publish to port 80 i.e. docker run -p 80:80)Now that we understand the core instructions that make up a Dockerfile, let’s see a working example of a Dockerfile. But first, I’ll explain what I want the container to do: Use the “Ubuntu” (version 22.04) operating system as the base. Set the working directory to be the root of the container. Create the text file “helloworld.txt”.# THIS IS A COMMENT# Use Ubuntu 22.04 as the base operating system of the containerFROM ubuntu:22.04# Set the working directory to the root of the containerWORKDIR / # Create helloworld.txtRUN touch helloworld.txtRemember, the commands that you can run via the RUN instruction will depend on the operating system you use in the FROM instruction. (In this example, I have chosen Ubuntu. It’s important to remember that the operating systems used in containers are usually very minimal. I.e., don’t expect a command to be there from the start (even commands like curl, ping, etc., may need to be installed.)Building Your First ContainerOnce we have a Dockerfile, we can create an image using the docker build command. This command requires a few pieces of information: Whether or not you want to name the image yourself (we will use the -t (tag) argument). The name that you are going to give the image. The location of the Dockerfile you wish to build with.I’ll provide the scenario and then explain the relevant command. Let’s say we want to build an image - let’s fill in the two required pieces of information listed above: We are going to name it ourselves, so we are going to use the -t argument. We want to name the image. The Dockerfile is located in our current working directory (.).The Dockerfile we are going to build is the following:# Use Ubuntu 22.04 as the base operating system of the containerFROM ubuntu:22.04# Set the working directory to the root of the containerWORKDIR / # Create helloworld.txtRUN touch helloworld.txtThe command would look like so: docker build -t helloworld . (we are using the dot to tell Docker to look in our working directory). If we have filled out the command right, we will see Docker starting to build the image:A terminal showing the building process of the “helloworld” imagecmnatic@thm:~$ docker build -t helloworld .Sending build context to Docker daemon 4.778MBStep 1/3 : FROM ubuntu:22.0422.04: Pulling from library/ubuntu2b55860d4c66: Pull completeDigest: sha256:20fa2d7bb4de7723f542be5923b06c4d704370f0390e4ae9e1c833c8785644c1Status: Downloaded newer image for ubuntu:22.04 ---&amp;gt; 2dc39ba059dcStep 2/3 : WORKDIR / ---&amp;gt; Running in 64d497097f8aRemoving intermediate container 64d497097f8a ---&amp;gt; d6bd1253fd4eStep 3/3 : RUN touch helloworld.txt ---&amp;gt; Running in 54e94c9774beRemoving intermediate container 54e94c9774be ---&amp;gt; 4b11fc80fdd5Successfully built 4b11fc80fdd5Successfully tagged helloworld:latestcmnatic@thm:~$Great! That looks like a success. Let’s use docker image ls to now see if this image has been built:Using the &quot;docker image ls&quot; command to confirm whether or not our image has successfully builtcmnatic@thm:~$ docker image lsREPOSITORY TAG IMAGE ID CREATED SIZEhelloworld latest 4b11fc80fdd5 2 minutes ago 77.8MBubuntu 22.04 2dc39ba059dc 10 days ago 77.8MBcmnatic@thm:~$Note: Whatever base operating system you list in the FROM instruction in the Dockerfile will also be downloaded. This is why we can see two images: helloworld (our image). ubuntu (the base operating system used in our image).You will now be able to use this image in a container. Refer to the “Running Your First Container” task to remind you how to start a container.Levelling up Our DockerfileLet’s level up our Dockerfile. So far, our container will only create a file - that’s not very useful! In the following Dockerfile, I am going to: Use Ubuntu 22.04 as the base operating system for the container. Install the “apache2” web server. Add some networking. As this is a web server, we will need to be able to connect to the container over the network somehow. I will achieve this by using the EXPOSE instruction and telling the container to expose port 80. Tell the container to start the “apache2” service at startup. Containers do not have service managers like systemd (this is by design - it is bad practice to run multiple applications in the same container. For example, this container is for the apache2 web server - and the apache2 web server only). # THIS IS A COMMENTFROM ubuntu:22.04# Update the APT repository to ensure we get the latest version of apache2RUN apt-get update -y # Install apache2RUN apt-get install apache2 -y# Tell the container to expose port 80 to allow us to connect to the web serverEXPOSE 80 # Tell the container to run the apache2 serviceCMD [&quot;apache2ctl&quot;, &quot;-D&quot;,&quot;FOREGROUND&quot;]For reference, the command to build this would be docker build -t webserver . (assuming the Dockerfile is in the same directory as where you run the command from). Once starting the container with the appropriate options (docker run -d --name webserver -p 80:80 webserver), we can navigate to the IP address of our local machine in our browser!The web server works! Currently, Apache2 is serving the default files because we have not added our own to the container.Optimising Our DockerfileThere’s certainly an art to Docker - and it doesn’t stop with Dockerfiles! Firstly, we need to ask ourselves why is it essential to optimise our Dockerfile? Bloated Dockerfiles are hard to read and maintain and often use a lot of unnecessary storage! For example, you can reduce the size of a docker image (and reduce build time!) using a few ways: Only installing the essential packages. What’s nice about containers is that they’re practically empty from the get-go - we have complete freedom to decide what we want. Removing cached files (such as APT cache or documentation installed with tools). The code within a container will only be executed once (on build!), so we don’t need to store anything for later use. Using minimal base operating systems in our FROM instruction. Even though operating systems for containers such as Ubuntu are already pretty slim, consider using an even more stripped-down version (i.e. ubuntu:22.04-minimal). Or, for example, using Alpine (which can be as small as 5.59MB!). Minimising the number of layers - I’ll explain this further below.Each instruction (I.E. FROM, RUN, etc.) is run in its own layer. Layers increase build time! The objective is to have as few layers as possible. For example, try chaining commands from RUN together like so:Before:FROM ubuntu:latestRUN apt-get update -yRUN apt-get upgrade -yRUN apt-get install apache2 -yRUN apt-get install net-tools -yA terminal showing five layers of a Dockerfile being builtcmnatic@thm:~$ docker build -t before .Step 2/5 : RUN apt-get update -y ---&amp;gt; Using cache ---&amp;gt; 446962612d20Step 3/5 : RUN apt-get upgrade -y ---&amp;gt; Running in 8bed81c695f4--omitted for brevity--cmnatic@thm:~$After:FROM ubuntu:latestRUN apt-get update -y &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get install apache2 -y &amp;amp;&amp;amp; apt-get install net-toolscmnatic@thm:~$ docker build -t after .Sending build context to Docker daemon 4.78MBStep 1/2 : FROM ubuntu ---&amp;gt; 2dc39ba059dcStep 2/2 : RUN apt-get update -y &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get install apache2 -y &amp;amp;&amp;amp; apt-get install net-tools ---&amp;gt; Running in a4d4943bcf04--omitted for brevity--cmnatic@thm:~$Note here how there are now only two build steps (this will be two layers, making the build much quicker). This is just a tiny example of a Dockerfile, so the build time will not be so drastic, but in much larger Dockerfiles - reducing the number of layers will have a fantastic performance increase during the build.Questions and Answers:Q What instruction would we use to specify what base image the container should be using? A FROMQ What instruction would we use to tell the container to run a command? A RUNQ What docker command would we use to build an image using a Dockerfile? A buildQ Let’s say we want to name this image; what argument would we use? A -tTask 5 : Intro to Docker ComposeLet’s first understand what Docker Compose is and why it’s worth understanding. So far, we’ve only interacted with containers individually. Docker Compose, in summary, allows multiple containers (or applications) to interact with each other when needed while running in isolation from one another.You may have noticed a problem with Docker so far. More often than not, applications require additional services to run, which we cannot do in a single container. For example, modern - dynamic - websites use services such as databases and a web server. For the sake of this task, we will consider each application as a “microservice”.While we can spin up multiple containers or “microservices” individually and connect them, doing so one by one is cumbersome and inefficient. Docker Compose allows us to create these “microservices” as one singular “service”.This illustration shows how containers are deployed together using Docker Compose Vs. Docker:Before we demonstrate Docker Compose, let’s cover the fundamentals of using Docker Compose. We need Docker Compose installed (it does not come with Docker by default). Installing it is out of scope for this room, as it changes depending on your operating system and other factors. You can check out the installation documentation here. We need a valid docker-compose.yml file - we will come onto this shortly. A fundamental understanding of using Docker Compose to build and manage containers.I have put some of the essential Docker Compose commands into the table below:CommandExplanationExampleupThis command will (re)create/build and start the containers specified in the compose file.docker-compose upstartThis command will start (but requires the containers already being built) the containers specified in the compose file.docker-compose startdownThis command will stop and delete&amp;nbsp;the containers specified in the compose file.docker-compose downstopThis command will stop (not delete) the containers specified in the compose file.docker-compose stopbuildThis command will build (but will not start) the containers specified in the compose file.docker-compose buildA Showcase of Docker ComposeWith that said, let’s look into how we can use Docker Compose ourselves. In this scenario, I am going to assume the following requirements:An E-commerce website running on ApacheThis E-commerce website stores customer information in a MySQL databaseNow, we could manually run the two containers via the following:Creating the network between the two containers: docker network create ecommerceRunning the Apache2 webserver container: docker run -p 80:80 --name webserver --net ecommerce webserverRunning the MySQL Database server: docker run --name database --net ecommerce webserver" }, { "title": "Bash Scripting", "url": "/posts/Bash-Scripting/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Bash, Scripting, Shell", "date": "2023-04-09 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Bash Scripting Task 1 : Introduction ### What is bash?Bash is a scripting language that runs within the terminal on most Linux distros, as well as MacOS. Shell scripts are a sequence of bash commands within a file, combined together to achieve more complex tasks than simple one-liner and are especially useful when it comes to automating sysadmin tasks such as backups.In this room we will be working with Bash syntax Variables Using parameters Arays Conditionals Task 2 : Our first bash script A bash script always starts with the following line of code at the top of the script. This is so our shell (whatever type of it) knows that it needs to run our file using bash in the terminal. #!/bin/bashLets get into some basic examples. #!/bin/bash echo &quot;Hello World&quot;This will return the string “Hello World”. The command “echo” is used to output text to the screen, the same way as “print” in python. we can also perform normal Linux commands inside our bash script and it will be executed if formatted right. For example we can run the command “ls” inside our bash script and we will see the output when we run the file. So lets make it do this! #!/bin/bash echo &quot;Hello World&quot; whoami idNow to run our bash script we must first give it executable permissions, And then we run it using ./ chmod +x yourfile.sh### Answer the questions below What piece of code can we insert at the start of a line to comment out our code?Solution: # What will the following script output to the screen, echo “BishBashBosh”Solution: BishBashBosh Task 3 : Variables In bash variables are quite simple and we create them like so: name = &quot;Jammy&quot;Where we give the value of Jammy and assign it to the variable name.Please note that for variables to work you cannot leave a space between the variable name, the ”=” and the value. They cannot have spaces in.So how would we now use our variable? Well its also very simple. We have to add a $ onto front of our variable name in order to use it. name=&quot;Jammy&quot; echo $nameIf we test this out in our own terminal we get something like this:$ name=&quot;Jammy&quot;$ echo $nameJammy" }, { "title": "Sdlc", "url": "/posts/SDLC/", "categories": "", "tags": "", "date": "2023-04-05 00:00:00 +0000", "snippet": "" }, { "title": "Introduction_to_devsecops", "url": "/posts/Introduction_to_DevSecOps/", "categories": "", "tags": "", "date": "2023-04-05 00:00:00 +0000", "snippet": "" }, { "title": "Introduction To Cryptography", "url": "/posts/Introduction-to-Cryptography/", "categories": "", "tags": "", "date": "2023-02-09 00:00:00 +0000", "snippet": "layout: posttitle: Introduction to Cryptographycategories: [Write-Ups, Try Hack Me, Conceptual]tags: [TryHackMe, Cryptograpgy, ]featured-image: _image/icon.jpegfeatured-image-alt: Cryptography—It’s a write-up about the room : Try Hack Me - Room : Introduction to Cryptography Task 01 : Introduction Task 02 : Symmetric Encryption Task 03 : Asymmetric Encryption Task 04 : Diffie-Hellman Key Exchange Task 05 : Hashing Task 06 : PKI and SSL/TLS Task 07 : Authnetacating with Passwords Task 08 : Cryptography and Data - Example Task 09 : Conclusion " }, { "title": "Object-Oriented-Programming", "url": "/posts/00001-BASIC-INTRO/", "categories": "Notes, Programming_Languages, Python, Theoritical Topics", "tags": "Note, Python, OOP, Reference", "date": "2023-01-12 00:00:00 +0000", "snippet": "It’s some notes about the room : [Python]Comments#This is a commentprint(&quot;Hello, World!&quot;)Stringsprint(&quot;Hello&quot;)print(&#39;Hello&#39;)message = &quot;TRIAL&quot;print(message)Listsmylist = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]print(mylist)SetsTuplesDictionariesConditionalsBooleansIterationsLoops" }, { "title": "Bash CheatSheet", "url": "/posts/bash-scripting/", "categories": "Notes, Programming_Languages, Bash", "tags": "Note, Bash, Reference", "date": "2023-01-12 00:00:00 +0000", "snippet": "Bash Script Header (Shebang)Option 1#!/bin/bashOption 2#!/usr/bin/env bash" }, { "title": "Task-14 [Day 9] Pivoting Dock the halls", "url": "/posts/Task-14-Day-9-Pivoting-Dock-the-halls/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Network, Wireshark", "date": "2022-12-10 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Advent of Cyber 2022Learning Objectives Using Metasploit modules and Meterpreter to compromise systems Network Pivoting Post exploitationConceptsWhat is Docker?Docker is a way to package applications, and the associated dependencies into a single unit called an image. This image can then be shared and run as a container, either locally as a developer or remotely on a production server. Santa’s web application and database are running in Docker containers, but only the web application is directly available via an exposed port. A common way to tell if a compromised application is running in a Docker container is to verify the existence of a /.dockerenv file at the root directory of the filesystem.What is Metasploit?Metasploit is a powerful penetration testing tool for gaining initial access to systems, performing post-exploitation, and pivoting to other applications and systems. Metasploit is free, open-source software owned by the US-based cybersecurity firm Rapid7.What is a Metasploit session?After successfully exploiting a remote target with a Metasploit module, a session is often opened by default. These sessions are often Command Shells or Meterpreter sessions, which allow for executing commands against the target. It’s also possible to open up other session types in Metasploit, such as SSH or WinRM - which do not require payloads.The common Metasploit console commands for viewing and manipulating sessions in Metasploit are:" }, { "title": "Scanning Through the Snow", "url": "/posts/Day-4-Scanning/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Network, Wireshark", "date": "2022-12-05 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Intro to ContainerisationTask 1 : Learning ObjectivesTask 2 : What is ScannningTask 3 : Scanning TypesTask 4 : Scanning TecniquesTask 5 : Scanning ToolsTask 6 :" }, { "title": "Wireshark 101", "url": "/posts/Wireshark101/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Network, Wireshark, Packet Analysis", "date": "2022-12-04 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Wireshark 101 Task 1 : Introduction Task 2 : Installation Task 3 : Wireshark Overview Task 4 : Collection Methods Task 5 : Filtering Captures Task 6 : Packet Dissection Task 7 : ARP Traffic Task 8 : ICMP Traffic Task 9 : TCP Traffic Task 10 : DNS Traffic Task 11 : HTTP Traffic Task 12 : HTTPS Traffic Task 13 : Analyzing Exploit PCAP’s Task 14 : Conclusion " }, { "title": "Intro to Containerisation", "url": "/posts/Intro-to-Containerisation/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Docker, Container, Introduction", "date": "2022-12-02 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Intro to ContainerisationTask 1 : IntroductionThis room is the first of a series explaining the popular technology of containerisation. ItLearning Outcomes:By completeing this room , we will know: What is containerisation where and why containersation is used A fundamental understanding of populer containersation technology called docker What makes docker so popular How containerisation worksMark the question to move on to the task 2Task 2 : What is ContainerisationIn computing terms, containerisation is the process of packaging an application and the necessary resources (such as libraries and packages) required into one package named container. The process of packaging application together makes application considerably portable and hassle-free to run.Modern applications are often complex and usually depend on frameworks and libraries being installed on a device before the appication can run. These dependencies can: Be difficult to install depending on the environment the application is running(some operating systems might not support them!) Create difficulty for developers to diagnose and replicate faults, as it could be a problem with the application’s environment - not the application itself! Can often conflict with each other. For example, having multiple versions of Python to run different applications is a headache for the user, and an application may work with one version of Python and not another. Containerisation platforms remove this headache by packaging the dependencies together and “isolating” (note: this is not to be confused with “security isolation” in this context) the application’s environment.Task 3 :Task 4 :Task 5 :Task 6 :Task 7 :Task 8 :" }, { "title": "Python for Pentesters", "url": "/posts/Python-for-Pentesters/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, scripting, python, pentesting", "date": "2022-09-23 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Python for Pentestershttps://tryhackme.com/module/scripting-for-pentestersTask 1 : IntroductionPython can be the most powerful tool in our arsenal as it can be used to build almost ant of the penetration testing tools. This room will give us several key pointer on we can build upon and improve. Throughout the room we will see how to: How to use python to enumerate the targets subdomin Build a simple keylogger Scan the network to find target systems Scan any target to find open ports Download files from internet Crack Hashes Task 2 : Subdomain EnumerationPython gives us an easy way to automate tasks during a penetration test. Any tasks that we have to perform regularly are worth automating. While the automation process comes with a learning curve, the mid and long-term gains are worth it.Finding subdomains used the target organisation is an efficient way to increase the attack surface and discover more vulnerabilities.The script will use a list of potential subdomains and prepends them to the domain name provided via a command-line argument.The script tries to connect to the subdomains and assumes the ones that accept the conncetion exist.import requestsimport syssub_list = open(&quot;subdaomains.txt&quot;).read()subdoms = sub_list.splitlines()for sub in subdoms dub_domains = f&#39;&#39;" }, { "title": "Linux PrivEsc", "url": "/posts/Linux-PrivEsc/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, linux, privilege escalation", "date": "2022-09-13 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Linux PrivEscTask 1 : Deploy the Vulnerable Debian VM" }, { "title": "Regular Expressions", "url": "/posts/Regular_Expressions/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, patterns, regex", "date": "2022-09-05 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Regular ExpressionsTask 1 : Introduction What are regular expression?Regular expressions (or Regex) are patterns of text that we define to search documents and match exactly what we are looking for. Why should we learn them?We will likely need them sooner or later, it’s a great tool to know how to use. It will make us more capable in CTF’s, and potentially a better developer. GoalsIn this room we will create a text file with some test paragraphs (in a Unix machine) and then use egrep to see what matches and what doesn&#39;t, or we can use an online editor like `https://regexr.com/` we can add our own text in the &quot;Text&quot; field, and then type our expressions (patterns) in the &quot;Expression&quot; field. Task 2 : CharsetsWhen we are searching for a specific string in a file or block of text, we can search for it as is, with grep &#39;string&#39; &amp;lt;file&amp;gt; . But what happens if we want to search for patterns of text? For example, we could be looking for a word that starts with a specific letter, or any words that end with numbers. That’s where Regular Expressions come in.Both of the aforementioned problems can be solved by using charsets. A charset is defined by enclosing in [ square brackets ] the character(s), or range of characters that we want to match. Then, it finds every occurrence of the pattern you have defined in the file/text you are searching.[abc] will match a, b, and c (every occurrence of each letter)[abc]zz will match azz, bzz, and czz.You can also use a - dash to define ranges:[a-c]zz is the same as above.And then you can combine ranges together:[a-cx-z]zz will match azz, bzz, czz, xzz, yzz, and zzz.Most notably, this can be used to match any alphabetical character:[a-zA-Z] will match any single letter (lowercase or uppercase).You can use numbers too:file[1-3] will match file1, file2, and file3.Then, there is a way to exclude characters from a charset with the ^ hat symbol, and include everything else.[^k]ing will match ring, sing, $ing, but not king.Of course, you can exclude charsets, not just single characters.[^a-c]at will match fat and hat, but not bat or cat.Note 1:Don’t confuse strings with charsets. The charset [abc] will match the string abc, but also cba and ca. It doesn’t match the string, but rather every occurrence of the specified characters in that string.Note 2:When specifying charsets, we should type the letters in the same order they appear in the questions, to avoid typing something correct that is not the right answer.Note 3:Answering some of these questions is going to be tricky. Often times there are many different patterns that match specific strings. That means (as stated in the previous note) that you may find a proper solution that isn’t the right answer for this room (because there can only be one). The right answer is typically the most efficient regex for that question. Efficient in this context means 2 things:1. Be specific. Here&#39;s an example: you could match any character from a to c using the `[a-z]` charset. But if the question only requires you to match characters from `a` to `c`, you should use the `[a-c]` charset, not `[a-z]`. 2. Don&#39;t be too specific. In contrast to the previous example, if a question requires you to match `a, c, f, r, s, z,` at that point, the expression that matches those specific characters would get longer and more complicated. So, it would make more sense to use `[a-z]`, because it is short and simple.To reiterate, there cannot be one single correct solution . So if we’ve tested your solution and it works, we can take a break and come back to it later.Answer the questions below Question : Match all of the following characters: c, o, g Answer : [cog] Question : Match all of the following words: cat, fat, hat Answer : [cfh]at Question : Match all of the following words: Cat, cat, Hat, hat Answer : [CcHh]at Question : Match all of the following filenames: File1, File2, file3, file4, file5, File7, file9 Answer : [Ff]ile[1-9] Question : Match all of the filenames of question 4, except “File7” (use the hat symbol) Answer : [Ff]ile[^7]Task 3 : Wildcards and optional charactersThe wildcard that is used to match any single character (except the line break) is the . dot. That means that a.c will match aac, abc, a0c, a!c, and so on.Also, we can set a character as optional in our pattern using the ? question mark. That means that abc? will match ab and abc, since the c is optional.Note: If we want to search for . a literal dot, you have to escape it with a \\ reverse slash. That means that a.c will match a.c, but also abc, a@c, and so on. But a\\.c will match just a.c.Answer the questions below Question :Match all of the following words: Cat, fat, hat, rat Answer : .at Question :Match all of the following words: Cat, cats Answer : [Cc]ats? Question :Match the following domain name: cat.xyz Answer : cat\\.xyz Question :Match all of the following domain names: cat.xyz, cats.xyz, hats.xyz Answer : [ch]ats?\\.xyz Question :Match every 4-letter string that doesn’t end in any letter from n to z Answer : ...[^n-z] Question :Match bat, bats, hat, hats, but not rat or rats (use the hat symbol) Answer : [^r]ats? Task 4 : Metacharacters and repetitionsThere are easier ways to match bigger charsets. For example, \\d is used to match any single digit.Here’s a reference:\\d matches a digit, like 9 \\D matches a non-digit, like A or @\\w matches an alphanumeric character, like a or 3\\W matches a non-alphanumeric character, like ! or #\\s matches a whitespace character (spaces, tabs, and line breaks)\\S matches everything else (alphanumeric characters and symbols)Note: Underscores _ are included in the \\w metacharacter and not in \\W. That means that \\w will match every single character in test_file.Often we want a pattern that matches many characters of a single type in a row, and we can do that with repetitions. For example, {2} is used to match the preceding character (or metacharacter, or charset) two times in a row. That means that z{2} will match exactly zz.Here’s a reference for each repetition along with how many times it matches the preceding pattern:{12} - exactly 12 times.{1,5} - 1 to 5 times.{2,} - 2 or more times.* - 0 or more times.+ - 1 or more times.Answer the questions below Question :Match the following word: catssss Answer : cats{4} Question :Match all of the following words (use the * sign): Cat, cats, catsss Answer : `` Question :Match all of the following sentences (use the + sign): regex go br, regex go brrrrrr Answer : `` Question :Match all of the following filenames: ab0001, bb0000, abc1000, cba0110, c0000 (don’t use a metacharacter) Answer : `` Question :Match all of the following filenames: File01, File2, file12, File20, File99 Answer : `` Question :Match all of the following folder names: kali tools, kali tools Answer : `` Question :Match all of the following filenames: notes~, stuff@, gtfob#, lmaoo! Answer : `` Question :Match the string in quotes (use the * sign and the \\s, \\S metacharacters): “2f0h@f0j0%! a)K!F49h!FFOK” Answer : `` Question :Match every 9-character string (with letters, numbers, and symbols) that doesn’t end in a “!” sign Answer : `` Question :Match all of these filenames (use the + symbol): .bash_rc, .unnecessarily_long_filename, and note1 Answer : `` Question : Answer : `` Question : Answer : ``" }, { "title": "Threat Intelligence Tools", "url": "/posts/Threat-Intelligence-Tools/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Threat Intelligence, PhishTool", "date": "2022-08-03 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Threat Intelligence ToolsTask 1 : Room OutlineThis room will cover the concepts of Threat Intelligence and various open-source tools that are useful. The learning objectives include: Understanding the basics of threat intelligence &amp;amp; its classifications. Using UrlScan.io to scan for malicious URLs. Using Abuse.ch to track malware and botnet indicators. Investigate phishing emails using PhishTool Using Cisco’s Talos Intelligence platform for intel gathering.Answer the questions belowRead and mark CompletedTask 2 : Threat IntelligenceThreat Intelligence is the analysis of data and information using tools and techniques to generate meaningful patterns on how to mitigate against potential risks associated with existing or emerging threats targeting organisations, industries, sectors or governments.To mitigate against risks, we can start by trying to answer a few simple questions: Who’s attacking you? What’s their motivation? What are their capabilities? What artefacts and indicators of compromise should you look out for?Threat Intelligence Classifications:Threat Intel is geared towards understanding the relationship between your operational environment and your adversary. With this in mind, we can break down threat intel into the following classifications:Strategic Intel: High-level intel that looks into the organisation’s threat landscape and maps out the risk areas based on trends, patterns and emerging threats that may impact business decisions.Technical Intel: Looks into evidence and artefacts of attack used by an adversary. Incident Response teams can use this intel to create a baseline attack surface to analyse and develop defence mechanisms.Tactical Intel: Assesses adversaries’ tactics, techniques, and procedures (TTPs). This intel can strengthen security controls and address vulnerabilities through real-time investigations.Operational Intel: Looks into an adversary’s specific motives and intent to perform an attack. Security teams may use this intel to understand the critical assets available in the organisation (people, processes, and technologies) that may be targeted.Answer the questions belowRead and mark CompletedTask 3 :" }, { "title": "Linux Modules", "url": "/posts/Linux-Modules/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Linux, Linux Modules, Linux Commands, Commands", "date": "2022-07-10 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Linux ModulesTask 1 : Let’s IntroduceIn this room we will be working with the most used commands of linux terminal. Such as : du grep, egrep, fgrep tr awk sed xargs curl wget xxd and some more of similar commandsTask 2 : duAbout du Command Flag Description -a Will list files as well with the folder. -h Will list the file sizes in human readable format(B,MB,KB,GB) -c Using this flag will print the total size at the end. Jic you want to find the size of directory you were enumerating -d Flag to specify the depth-ness of a directory you want to view the results for (eg. -d 2) –time To get the results with time stamp of last modified. " }, { "title": "Database Design and Performance", "url": "/posts/Database-Design-and-performance/", "categories": "Database, PostgreSQL", "tags": "Database, PostgreSQL, Queries", "date": "2021-12-10 00:00:00 +0000", "snippet": "Part-1 : DB design and normalizationDesigning tablesAt the start of a new project, or a new feature in the project, one of the first things that we are required to define or design are the entities that interact with the system. In our library project, we had users, addresses, books as entities and we designed tables and relationships based on how we assumed these entities would interact. As the project evolves and requirements change, the design of our tables may result in inconsistencies and anomalies when running queries.Take a look at our books table. A book can have one and only one author, but many books are written collaboratively.library=# \\d books Table &quot;public.books&quot; Column | Type | Modifiers----------------+-----------------------------+---------------------------------------------------- id | integer | not null default nextval(&#39;books_id_seq&#39;::regclass) title | character varying(100) | not null author | character varying(100) | not null published_date | timestamp without time zone | not null isbn | integer |Indexes: &quot;books_pkey&quot; PRIMARY KEY, btree (id) &quot;books_isbn_key&quot; UNIQUE CONSTRAINT, btree (isbn)Referenced by: TABLE &quot;reviews&quot; CONSTRAINT &quot;reviews_book_id_fkey&quot; FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE TABLE &quot;users_books&quot; CONSTRAINT &quot;users_books_book_id_fkey&quot; FOREIGN KEY (book_id) REFERENCES books(id) ON UPDATE CASCADEFor example how do we insert the book “http://www.amazon.com/gp/product/1937077632” Smart Money Smart Kids, by Dave Ramsey and Rachel Cruz.library=# INSERT INTO books(title, author, published_date) VALUES (&#39;Smart Money Smart Kids&#39;, &#39;Dave Ramsey&#39;, &#39;4/29/2014&#39;);INSERT 0 1library=# INSERT INTO books(title, author, published_date) VALUES (&#39;Smart Money Smart Kids&#39;, &#39;Rachel Cruz&#39;, &#39;4/29/2014&#39;);INSERT 0 1Now we have duplicate data in our databaselibrary=# SELECT * FROM books WHERE title = &#39;Smart Money Smart Kids&#39;; id | title | author | published_date | isbn----+------------------------+-------------+---------------------+------ 23 | Smart Money Smart Kids | Dave Ramsey | 2014-04-29 00:00:00 | 24 | Smart Money Smart Kids | Rachel Cruz | 2014-04-29 00:00:00 |(2 rows)Not only do we have duplicate id’s for the same book, but this anomaly could be carried into the users table when checking out a book. These database inconsistencies occur all the time in real life work situations, database developers and administrators have to work together to redesign/normalize the database and also clean up the data.The other way we could have done it was to add another author field call it author_2. In this case, we would have the same book_id, but multiple authorsTable &quot;public.books&quot;Column | Type | Modifiers---------------+-----------------------------+----------------------------------------------------id | integer | not null default nextval(&#39;books_id_seq&#39;::regclass)title | character varying(100) | not nullauthor | character varying(100) | not nullauthor_2 | character varying(100) | not nullpublished_date | timestamp without time zone | not nullisbn | integer | id | title | author | author_2 | published_date | isbn----+------------------------+-------------+---------------+---------------------+------ 23 | Smart Money Smart Kids | Dave Ramsey | Rachel Cruz | 2014-04-29 00:00:00 |Normalizing a databaseSeparating this data into two tables is called normalizing the database. Normalizing is the process of organizing data effectively in tables. In our example above, adding multiple columns lets the user get to the same information from both columns. However, it restricts future growth. On the other hand, adding multiple records results in duplicate data, but permits data in normal form and future growth. What is “Normal Form”As we worked through the above DB design, our second example was a denormalized database. We added an additional column to include data and did not allow for expansion of authors for a book. Our first example, even though it had duplicate records for the same book, is referred to as First Normal Form.Normal form is a term used in database theory. Databases can be 1NF (First Normal Form), 2NF (Second Normal Form), 3NF (Third Normal Form) or BCNF also knows as 3.5NF or Boyce–Codd Normal Form and so on. The higher the normal form, the less likely a database will have inconsistencies. In most cases, 3NF is considered good enough." }, { "title": "Linux Modules", "url": "/posts/Linux-Modul/", "categories": "Write-Ups, Try Hack Me", "tags": "TryHackMe, Linux, Linux Modules, Linux Commands, Commands", "date": "2021-07-10 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Linux ModulesTask 1 : Let’s IntroduceIn this room we will be working with the most used commands of linux terminal. Such as : du grep, egrep, fgrep tr awk sed xargs curl wget xxd and some more of similar commandsTask 2 : duAbout du Command Flag Description -a Will list files as well with the folder. -h Will list the file sizes in human readable format(B,MB,KB,GB) -c Using this flag will print the total size at the end. Jic you want to find the size of directory you were enumerating -d Flag to specify the depth-ness of a directory you want to view the results for (eg. -d 2) –time To get the results with time stamp of last modified. " }, { "title": "Object-Oriented-Programming", "url": "/posts/Object-Oriented-Programming/", "categories": "Notes, Programming_Languages, Python, Theoritical Topics", "tags": "Note, Python, OOP, Reference", "date": "2019-06-01 00:00:00 +0000", "snippet": "It’s a write-up about the room : Try Hack Me - Room : Linux ModulesTask 1 : Let’s Introduce" } ]
